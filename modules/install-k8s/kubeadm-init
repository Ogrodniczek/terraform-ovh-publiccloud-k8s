#!/bin/bash -e
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "0" ]; then
    echo "nothing to be done" >&2
fi

function pubipaddr(){
    if ip route get 1.1.1.1 > /dev/null 2>&1; then
        ip -o route get 1.1.1.1 | sed 's/.*src \([0-9\.]*\) .*/\1/g'
    else
        return 1
    fi
}

# required as kubeadm will make use of binaries such as kubelet
export PATH=$PATH:/opt/k8s/bin

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/k8s/bin/etcdctl --cacert $ETCD_CA_FILE --cert $ETCD_CERT_FILE --key $ETCD_KEY_FILE --endpoints $ETCD_ENDPOINTS"

# Try to get pki from etcd, if already generated by a previous run of kubeadm
PKI=$($ETCDCTL_COMMAND get --print-value-only "$PKI_ETCD_KEY")
TOKEN=$($ETCDCTL_COMMAND get --print-value-only $BOOTSTRAP_TOKEN_ETCD_KEY)
DISCOVERY_CA_TOKEN=$($ETCDCTL_COMMAND get --print-value-only $DISCOVERY_CA_TOKEN_ETCD_KEY)

if [ -z "$API_ENDPOINT" ]; then
    JOIN=$($ETCDCTL_COMMAND get --prefix "$MASTERS_ETCD_KEYPREFIX" --print-value-only --limit 1):6443
else
    JOIN="$API_ENDPOINT"
fi

if [ -z "$PKI" ] || [ -z "$TOKEN" ] || [ -z "$DISCOVERY_CA_TOKEN" ]; then
    etcd_keys=missing
else
    etcd_keys=present
fi

# Node is a master
if [ "$MASTER_MODE" == "1" ] && [ "$etcd_keys" == "missing" ]; then
    # we need to generate the pki & token and store it into the etcd

    echo "primary master. kubeadm init" >&2
    # generate kubeadm config
    if [ ! -d /etc/kubernetes/kubeadm ]; then
        mkdir -p /etc/kubernetes/kubeadm
    fi

    # kubeadm init
    /opt/k8s/kubeadm_config.yaml.sh "${API_ENDPOINT:-$(pubipaddr):6443}" > /etc/kubernetes/kubeadm/config.yaml

    if ! /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml; then
        echo "primary master kubeadm init failed." >&2
        exit 1
    fi

    echo "Putting token into etcd." >&2
    # tokens are valid 24h. if scaling worker nodes after this delay
    # dont forget to regenerate a valid token before
    $ETCDCTL_COMMAND put $BOOTSTRAP_TOKEN_ETCD_KEY "$(/opt/k8s/bin/kubeadm token list | tail -n1 | awk '{print $1}')"
    echo "Putting pki into etcd." >&2
    $ETCDCTL_COMMAND put "$PKI_ETCD_KEY" "$(cd /etc/kubernetes/pki && tar -cf - * | base64)"

    echo "Putting discovery ca token into etcd." >&2
    discovery_ca_token=$(openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1)
    $ETCDCTL_COMMAND put "$DISCOVERY_CA_TOKEN_ETCD_KEY" "sha256:$discovery_ca_token"

elif  [ "$etcd_keys" == "present" ]; then
    if [ "$MASTER_MODE" == "1" ]; then
        echo "pki already in etcd. retrieving.." >&2
        mkdir -p /etc/kubernetes/pki
        (cd /etc/kubernetes/pki  && echo -e "$PKI" | base64 -d | tar -xf -)

        # Join the cluster
        echo "Joining the cluster as master on endpoint $API_ENDPOINT" >&2
        /opt/k8s/bin/kubeadm join \
                             --discovery-token-ca-cert-hash "$DISCOVERY_CA_TOKEN" \
                             --token "$TOKEN" \
                             --experimental-control-plane \
                             "$JOIN"
        echo "Registering master into etcd." >&2
        if ip=$(pubipaddr); then
            $ETCDCTL_COMMAND put "${MASTERS_ETCD_KEYPREFIX}/$(hostname)" "$ip"
        else
            echo "WARNING: Couldn't get ip addr & register master node." >&2
        fi
    elif [ "$WORKER_MODE" == "1" ]; then
        echo "Joining the cluster as worker on endpoint $API_ENDPOINT" >&2
        /opt/k8s/bin/kubeadm join \
                             --discovery-token-ca-cert-hash "$DISCOVERY_CA_TOKEN" \
                             --token "$TOKEN" \
                             "$JOIN"
    else
        echo "Neither worker nor master" >&2
    fi
else
    if [ -z "$TOKEN" ]; then
        echo "No bootstrap token found into etcd" >&2
    fi
    if [ -z "$DISCOVERY_CA_TOKEN" ]; then
        echo "No discovery ca token found into etcd" >&2
    fi
    if [ -z "$PKI" ]; then
        echo "No pki found into etcd" >&2
    fi
    if [ -z "$JOIN" ]; then
        echo "No master registered or no API_ENDOINT specified found into etcd" >&2
    fi
    echo "either etcd hasn't got its keys yet or maybe something went wrong" >&2
    exit 1
fi

if [ "$MASTER_MODE" == "1" ]; then
    echo "Registering master into etcd." >&2
    if ip=$(pubipaddr); then
        $ETCDCTL_COMMAND put "${MASTERS_ETCD_KEYPREFIX}/$(hostname)" "$ip"
    else
        echo "WARNING: Couldn't get ip addr & register master node." >&2
    fi
fi
