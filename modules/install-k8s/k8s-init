#!/bin/bash -e
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "0" ]; then
    echo "nothing to be done" >&2
fi

# Do not run if init has already been done
if [ -f /opt/k8s/init.done ]; then
   echo "init already done" >&2
   exit 0
fi

if [ ! -d "${POD_MANIFEST_PATH}" ]; then
    mkdir -p "${POD_MANIFEST_PATH}"
fi

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/k8s/bin/etcdctl --cacert $ETCD_CA_FILE --cert $ETCD_CERT_FILE --key $ETCD_KEY_FILE --endpoints $ETCD_ENDPOINTS"

# Acquire lock on kubeadm-init script if initializing a new master
# Otherwise, run the script without locking
if [ "$MASTER_MODE" == "1" ]; then
    echo "initializing master mode" >&2
    # run kubeadm on master nodes with a lock as the first node will gen
    # the cluster pki certs
    if [ -z "$INIT_ETCD_LOCK" ]; then
        echo "lock var is undefined. cannot proceed" >&2
        exit 1
    fi
    echo "acquiring lock $INIT_ETCD_LOCK" >&2
    $ETCDCTL_COMMAND lock "$INIT_ETCD_LOCK" /opt/k8s/kubeadm-init
    echo "kubeadm init done, lock $INIT_ETCD_LOCK released" >&2

    # Untaint node if needed
    if [ "$WORKER_MODE" == "1" ]; then
        echo "untainting $(hostname) master node" >&2
        /opt/k8s/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf taint nodes $(hostname) node-role.kubernetes.io/master-
    fi

    # generate coredns config
    /opt/k8s/coredns-manifest.yaml.sh > /etc/kubernetes/manifests/coredns-manifest.yaml

    # generate cni config
    if [ ! -d /etc/kubernetes/cni ]; then
        mkdir -p /etc/kubernetes/cni
    fi
    /opt/k8s/cni-manifest.yaml.sh > /etc/kubernetes/cni/cni-manifest.yaml

    # Apply CNI manifests if master
    /opt/k8s/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /etc/kubernetes/cni/cni-manifest.yaml

else
    echo "initializing worker mode" >&2
    exec /opt/k8s/kubeadm-init
fi

touch /opt/k8s/init.done
